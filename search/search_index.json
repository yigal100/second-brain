{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About","text":"<p>\ud83d\udc4b Hello World! </p> <p>A philosopher, a photographer, a techie engineer.</p> <p>This is my space for discussing anything from politices and religion to spaces vs. tabs. </p> <p>Alignment - Chaotic_Good</p> Famous last words <p>\"A clever person solves a problem. A wise person avoids it.\"</p> <p>-- The Difference Between The Clever Developer &amp; The Wise Developer</p>"},{"location":"Blog/Blog/first_post/","title":"Welcome","text":"<p>This space is intended as a journal. All the opinions stated herein are my own. </p>"},{"location":"digital-garden/","title":"Digital Garden","text":"<p>A place to collate knowledge on various topics that interest me:</p>"},{"location":"digital-garden/#tag:local_reasoning","title":"local_reasoning","text":"<ul> <li>            Code Structure &amp; Organisation          </li> </ul>"},{"location":"digital-garden/#tag:modularity","title":"modularity","text":"<ul> <li>            Code Structure &amp; Organisation          </li> </ul>"},{"location":"digital-garden/Fe-lang/code-structure--organisation/","title":"Design Goals","text":"<ol> <li>Local reasoning that scales</li> <li>Separate orthogonal concerns - physical code layout should be independent from logical code layout.</li> <li>Privacy controls. Considering internal to the current compilation unit (CU), private, public</li> <li>Hierarchical symbol naming - i.e. <code>Foo::Bar::Baz</code></li> <li>Hierarchical multi layer software composition to support the large scale and increasing complexity of enterprise software. multiple phases of linking </li> <li>Smallest atomic unit of unsafety - types and related <code>impl</code>s (in Rust) need to be enclosed in an unsafe container or boundary. We can use an <code>unsafe</code> global statement for this!</li> <li>Trace back from identifier to its definition</li> <li>WebAssembly native and supports the component model</li> </ol>","tags":["modularity","local_reasoning"]},{"location":"digital-garden/Fe-lang/code-structure--organisation/#hierarchical-layering","title":"Hierarchical layering","text":"<ol> <li>Smallest atomic unit of composition - <code>module</code>. Corresponds mostly to a single source file. Contains logical source <code>item</code>s such as <code>trait</code>s and types (<code>struct</code>s, <code>enum</code>s, ..), functions, etc. Within a source file, it </li> <li>Compilation unit - corresponds to a project / directory with source files. Within a project there are logical relations between items. </li> </ol>","tags":["modularity","local_reasoning"]},{"location":"digital-garden/Fe-lang/code-structure--organisation/#logical-structure","title":"Logical structure","text":"<ul> <li>file structure corresponds to module structure with support for optional inline module declarations</li> <li>full flexibility with namespaces that can be reused in multiple files?</li> <li>unsafe code needs a well defined boundary</li> <li>public reexports &amp; API design considerations</li> <li>privacy &amp; export facility </li> </ul>","tags":["modularity","local_reasoning"]},{"location":"digital-garden/Fe-lang/code-structure--organisation/#physical-layout-of-source-code","title":"Physical layout of source code","text":"<p>include all files automatically vs have a project file that lists included files</p>","tags":["modularity","local_reasoning"]},{"location":"digital-garden/Fe-lang/code-structure--organisation/#artefacts-deployment","title":"Artefacts, deployment","text":"","tags":["modularity","local_reasoning"]},{"location":"digital-garden/Fe-lang/code-structure--organisation/#compilation-unit","title":"Compilation Unit","text":"<p>A compilation unit is a collection of source files (a single project) </p>","tags":["modularity","local_reasoning"]},{"location":"digital-garden/Fe-lang/code-structure--organisation/#namespaces-packages-modules-file-scope","title":"Namespaces, Packages &amp; Modules, File scope","text":"","tags":["modularity","local_reasoning"]},{"location":"digital-garden/Fe-lang/code-structure--organisation/#modules-packages","title":"Modules(&amp; packages?)","text":"<p>one per file / multiple per file, but unlike namespace won't span multiple files.</p> <p>File scope and unnamed modules?</p>","tags":["modularity","local_reasoning"]},{"location":"digital-garden/Fe-lang/code-structure--organisation/#namespaces","title":"Namespaces","text":"<p>logical and can span multiple files. </p> <p>import symbol from module</p>","tags":["modularity","local_reasoning"]}]}